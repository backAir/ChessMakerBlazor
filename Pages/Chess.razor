@page "/chess"
@using System.Text
@using System.Threading
@using System.Net.WebSockets
@using Microsoft.AspNetCore.SignalR.Client
@using MyApplication.Pages.Boards
@inject IConfiguration Config
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@inject IToastService toastService;
@using Blazored.Toast.Configuration



<ChessCSS chessBoard="@chessBoard"/>

                
<div class="vertical-flex-container">


    <div class="flex-container">
        
        @if(chessBoard != null){
            <div class="flex1 resizeable">
                @if(chessBoard != null && chessBoard.gameOver && !chessBoard.closedEndGameBox){
                    <div class="endGameContainer">
                        <div class="endGame">
                            @* ui for when a chess game ended *@
                            <div class="endGameText"> @chessBoard.winnerText </div>
                            
                            <button class="endGame-button" @onclick="()=>{chessBoard.closedEndGameBox = true;}">
                                <h2>ok</h2>
                            </button>
                        </div>
                    </div>
                }
                @* Chessboard *@
                @if(boardType == 0){
                    <ChessBoardUi Chess="@this"></ChessBoardUi>
                }
                
                @* Hex Chessboard *@
                @if(boardType == 1){
                    <HexBoardUi Chess="@this"></HexBoardUi>
                }
            </div>

        }else
        {
            @* <p> ChessBoard here </p> <br> *@

            @if(onlineGameID != -1){
                <div>
                    <BlazoredToasts Position="ToastPosition.TopLeft"
                        Timeout="4"
                        IconType="IconType.FontAwesome"
                        SuccessClass="success-toast-override"
                        SuccessIcon="fa fa-thumbs-up"
                        ErrorIcon="fa fa-bug"
                        ShowProgressBar="true"
                        MaxToastCount="5" />
                    @* <h1> Game ID: @onlineGameID</h1> *@
                    <h1>Invite someone using the link below</h1>
                    <br>
                    <p>link to join game: @NavigationManager.Uri</p>
                    <br>
                    <button class="createGameButton" @onclick="CopyToClipboard">Copy link to clipbloard</button>
                </div>

            }
        }

        
        @* Side UI *@
        @if(!gameStarted && !online){
        <div class="side-ui">

            @code{
                string focused = "tab-focused";
                bool isChecked = true;

                void SetTab(Tabs tab){
                    tabSelected = tab;
                    SetGamemode(activeGameMode);
                }
            }
            <div class="tabs">
                <div class="tab @(tabSelected == Tabs.presets? @focused : '\0' )" @onclick="()=>{SetTab(Tabs.presets);}">
                    Presets
                </div>
                <div class="tab @(tabSelected == Tabs.ruleset? @focused : '\0' )" @onclick="()=>{SetTab(Tabs.ruleset);}">
                    Rules
                </div>
                <div class="tab @(tabSelected == Tabs.custom? @focused : '\0' )" @onclick="()=>{SetTab(Tabs.custom);}">
                    Custom
                </div>
            </div>

            <div class="customisation">

                @if(tabSelected == Tabs.presets){
                    <br>
                    @* GameMode selection screen *@
                    <div class="customisation-content"> 
                        
                        @* Create a div for each gamemode *@
                        @if(!online){
                            @* <button class="gameMode-button" @onclick="()=>{SetGamemode("nothing");}">
                                <h2>CUSTOM</h2>
                                <p>your own creation</p>
                            </button> *@
                            @foreach (var item in GamemodeList.GameModes)
                            {
                                <button class="gameMode-button" @onclick="()=>{SetGamemode(item.Key);}">
                                    <h2>@item.Key</h2>
                                    <p>@item.Value</p>
                                </button>
                            }
                        }
                        
                    </div>
                }
                
                @if(tabSelected == Tabs.ruleset){
                    <Rules Chess="@this"/>
                }

                @if(tabSelected == Tabs.custom){
                    <div class="pieces-menu">
                        @foreach(var item in Pieces.whitePieces){
                            if(item.Key == "")
                            if(item.Key == "HK"){
                                break;
                            }
                            <div class="piece-menu-piece">
                                <img src=@SharedFunctions.GetPiecePng(item.Key, 0) class="pieces-menu-image" />
                            </div>
                        }
                    </div>
                }

            </div>
            
            @* Start Game DIV *@
            <div class="StartGame">
                <button class="StartGame-button" @onclick="()=>{StartGameLocal();}">
                    <h2>Play locally</h2>
                </button>
                <button class="StartGame-button" @onclick="()=>{StartGameOnline();}">
                    <h2>Play online</h2>
                </button>
            </div>

        </div>
        }else if(!online){
            <div class="LocalGame">
                <button class="StartGame-button" @onclick="()=>{gameStarted = false;}">
                    <h2>Stop Game</h2>
                </button>
            </div>
        }
        

    </div>
</div>

@code{

    void StartGameLocal(){
        gameStarted = true;
        SetGamemode(activeGameMode);
    }

    void StartGameOnline(){
        CrossPage.activeGameMode = activeGameMode;
        NavigationManager.NavigateTo("/online");
    }

    public enum Tabs{
        presets,
        ruleset,
        custom
    }

    public async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", NavigationManager.Uri);
        toastService.ShowInfo("Link copied to clipboard");
    }

    public bool gameStarted = false;

    public Tabs tabSelected = new Tabs();

    // Variables
    [Parameter]
    public bool debug {get; set;} = true;
    [Parameter]
    public bool online {get; set;} = false;
    [Parameter]
    public int onlineGameID {get; set;} = -1;
    [Parameter]
    public string activeGameMode {get; set;} = "";
    public int boardType = 1;
    bool canMove = false;
    List<(int,int)> selectedSquares = new List<(int,int)>();
    public string[,,] PiecesImgs = null;

    public string[,] Portals = null;
    public byte[,] SquareState = null;

    SignalRClient client;


    public ChessBoard chessBoard = null;
    int[] selectedSquare = new int[]{-1,-1};

    public int onlineColor = -1;
    int boardWidth = 400;
    public string onlineSessionID;


    // On initialized
    protected override async Task OnInitializedAsync()
    {
        #if !DEBUG
            debug = false;
        #endif
        
        // ptn de canadiens ces jours
        if(!online){
            // get first element of the dictionnary
            SetGamemode(GamemodeList.GameModes.First().Key);
            canMove = true;
            return;
        }

        client = new SignalRClient();
        client.page = this;
        await client.Connect();


        if(onlineGameID == -1){ // arg is -1 if you want to create a game
            var createGameArgs = new CreateGameArgs(activeGameMode,"Guest 1");
            client.CreateGame(createGameArgs);
        }else
        {
            @* var playerID = localStorage.GetItem<string>("playerID");
            var storedGameID = localStorage.GetItem<string>("gameID"); *@

            var activeGames = localStorage.GetItem<Dictionary<int,string>>("activeGames");
            
            if(activeGames.ContainsKey(onlineGameID)){
                Debug.Log("yay contains key");
                onlineSessionID = activeGames[onlineGameID];
                var reconnectArgs = new ReconnectArgs(onlineSessionID,onlineGameID);
                client.Reconnect(reconnectArgs);
                return;
            }            

            var joinGameArgs = new JoinedGameArgs(onlineGameID,"Guest 2");
            client.JoinGame(joinGameArgs);
            Debug.Log("Joined Game");
        }
        
    }

    public void ReloadPage(){
        @* NavigationManager.NavigateTo(NavigationManager.BaseUri+"/online/"+onlineGameID,true); *@
    }

    // Reactions to messages from the server:
    public void CreateOnlineGame(GameCreatedArgs args, bool reconnect = false){
        if(onlineGameID==-1){
            NavigationManager.NavigateTo(NavigationManager.Uri+"/"+args.gameID);
        }
        activeGameMode = args.gameMode;
        onlineGameID = args.gameID;
        onlineColor = args.color;
        onlineSessionID = args.playerID;

        var activeGames = localStorage.GetItem<Dictionary<int,string>>("activeGames");
        activeGames[onlineGameID] = args.playerID;
        if(!reconnect){
            localStorage.SetItem("activeGames",activeGames);
        }

    }
    public void StartOnlineGame(){
        Debug.Log("starting online game"+ activeGameMode);
        SetGamemode(activeGameMode, true);
        canMove = true;
    }
    public void ReceiveMove(MovePiece move){
        if(chessBoard.CanMove(move.from[0], move.from[1], move.to[0], move.to[1]) && chessBoard.turn != onlineColor){
            MovePiece(move.from[0], move.from[1], move.to[0], move.to[1], false);
        }else{
            canMove = false;
            chessBoard.winnerText = "Your opponent is trying to cheat ;)\nif you didn't cheat you win GG";
            chessBoard.gameOver = true;
            chessBoard.closedEndGameBox = false;
            DeselectSquare();
            RefreshBoard();
        }
        RefreshBoard();
    }

    public void Reconnect(ToClientReconnectArgs args){
        //Todo: this function

        //TODO: check if new moves happened in the meantime
        if(chessBoard != null){
            Debug.Log("all moves Client: "+chessBoard.allMoves.Count);
            Debug.Log("all moves Server: "+args.allMoves.Count);
            if(chessBoard.allMoves.Count<args.allMoves.Count){
                var move = args.allMoves[args.allMoves.Count-1];
                MovePiece(move[0][0],move[0][1],move[1][0],move[1][1]);
            }
            return;
        }


        var gameCreatedArgs = new GameCreatedArgs(args.gameID,args.gameMode,args.color,args.playerID);
        CreateOnlineGame(gameCreatedArgs,true);
        if(args.gameStarted){
            StartOnlineGame();
        }

        onlineColor = args.color;
        var moves = args.allMoves;
        for (var i = 0; i < moves.Count; i++)
        {
            MovePiece(moves[i][0][0],moves[i][0][1],moves[i][1][0],moves[i][1][1]);
        }
        Debug.Log("Reconnected");
        RefreshBoard();
    }



    public ValueTask DisposeAsync(){
        @* if(client!=null){
            return client.DisposeAsync();
        } *@
        return ValueTask.CompletedTask;
    }

    // Create game
    public void SetGamemode(string gameMode, bool online = false){
        if(chessBoard != null){
            DeselectSquare();
        }
        if(online){
            Debug.Log("SetGamemode: "+gameMode);
        }

        activeGameMode = gameMode;
        if(gameMode == "Hex Chess"){
            boardType = 1;
        }else
        {
            boardType = 0;
        }
        selectedSquares = new List<(int,int)>();
        chessBoard = new ChessBoard(gameMode);//Everything,Classic
        PiecesImgs = new string[chessBoard.boardSize[0],chessBoard.boardSize[1],2];
        SquareState = new byte[chessBoard.boardSize[0],chessBoard.boardSize[1]];

        Portals = SharedFunctions.GetRenderedPortals(chessBoard);
        
        RefreshBoard();
    }

    // End game

    public void GameCleaned(){
        canMove = false;
        chessBoard.winnerText = "Game timed out";
        chessBoard.gameOver = true;
        chessBoard.closedEndGameBox = false;
        DeselectSquare();
        RefreshBoard();
    }
    
    // Board actions
    public void ClickSquare(int x, int y){
        @* Debug.Log("clicked: "+x+"|"+y); *@
        if(chessBoard.gameOver || !canMove || (online && chessBoard.turn != onlineColor)){
            return;
        }
        if(selectedSquare[0]==-1){
            if(chessBoard.board[x,y] != null && chessBoard.board[x,y].IsTeam(chessBoard.turn)){
                SelectSquare(x,y);
            }else
            {
                DeselectSquare();
            }
        }else
        {
            if(x == selectedSquare[0] && y == selectedSquare[1]){
                DeselectSquare();
            }else
            {
                if(chessBoard.board[x,y] != null){
                    if(chessBoard.CanMove(selectedSquare[0],selectedSquare[1],x,y)){
                        MovePiece(selectedSquare[0],selectedSquare[1],x,y);
                        return;
                    }else
                    {
                        if(chessBoard.board[x,y].IsTeam(chessBoard.turn)){
                            SelectSquare(x,y);
                            return;
                        }
                    }
                }

                if(chessBoard.CanMove(selectedSquare[0],selectedSquare[1],x,y)){
                        MovePiece(selectedSquare[0],selectedSquare[1],x,y);
                        return;
                    }
                DeselectSquare();
                return;
            }
        }
    }

    public enum Sound​{
        Move,
        Capture
    }
    public async void PlaySound(Sound sound){
        await JSRuntime.InvokeVoidAsync("playSound",sound.ToString());
    }
    public void MovePiece(int fromX, int fromY, int toX, int toY, bool sendToServer = true){
        chessBoard.MovePiece(fromX, fromY, toX, toY, this);
        if(online && sendToServer){
            var move = new SendMoveArgs(new int[]{fromX, fromY}, new int[]{toX,toY},onlineGameID, chessBoard.actionsMade);
            client.SendMove(move);
        }
    }

    public void SelectSquare(int x, int y){
        DeselectSquare();

        if(chessBoard.gameOver || !canMove || (online && chessBoard.turn != onlineColor)){
            return;
        }

        selectedSquare[0] = x;
        selectedSquare[1] = y;
        SquareState[x,y] = 1;
        selectedSquares.Add((x,y));

        if(chessBoard.legalMoves[x,y] == null){
            return;
        }
        foreach (var item in chessBoard.legalMoves[x,y])
        {
            if(chessBoard.board[item.Key.Item1,item.Key.Item2] == null){
                // Check for en passant or checkers capture
                selectedSquares.Add((item.Key.Item1,item.Key.Item2));
                if(item.Value.capturedPiece != null){
                    SquareState[item.Key.Item1,item.Key.Item2] = 3; // attack (red)
                    continue;
                }
                SquareState[item.Key.Item1,item.Key.Item2] = 2; // path (blue)
            }else
            {
                //Check for castling
                selectedSquares.Add((item.Key.Item1,item.Key.Item2));
                if(item.Value.castlingRookStart != null &&
                    item.Value.castlingRookStart[0] == item.Key.Item1 && item.Value.castlingRookStart[1] == item.Key.Item2)
                {
                    SquareState[item.Key.Item1,item.Key.Item2] = 2; // path (blue)
                    continue;
                }
                SquareState[item.Key.Item1,item.Key.Item2] = 3; // attack (red)
            }
        }
    }
    public void DeselectSquare(){
        selectedSquare[0] = -1;
        //SquareState = new byte[chessBoard.boardSize[0],chessBoard.boardSize[1]];
        foreach (var item in selectedSquares)
        {
            SquareState[item.Item1,item.Item2] = 0;
        }
        selectedSquares = new List<(int, int)>();
        
        if(chessBoard.allMoves.Count() == 0){
            return;
        }
        var lastMove = chessBoard.allMoves[chessBoard.allMoves.Count()-1];

        SquareState[lastMove[0,0],lastMove[0,1]] = 4;
        SquareState[lastMove[1,0],lastMove[1,1]] = 4;
        selectedSquares.Add((lastMove[0,0],lastMove[0,1]));
        selectedSquares.Add((lastMove[1,0],lastMove[1,1]));
    }

    public void RefreshBoard(){
        SharedFunctions.GetRenderedBoard(chessBoard, PiecesImgs);
        StateHasChanged();
    }

    // Drag and drop

    public void DragStart(int x, int y){
        if(chessBoard.board[x,y] != null && chessBoard.board[x,y].IsTeam(chessBoard.turn)){
            if(chessBoard.gameOver || !canMove || (online && chessBoard.turn != onlineColor)){
                return;
            }
            dragSquare[0] = x;
            dragSquare[1] = y;
            SelectSquare(x,y);
        }
    
    }

    public async Task Alert(string message){
        await JSRuntime.InvokeVoidAsync("alert", message);
    }

    public void DragEnter(int x, int y){
        dragSquare[0] = x;
        dragSquare[1] = y;
    }

    int[] dragSquare = new int[]{-1,-1};

    public void DragEnd(int x, int y){
        Debug.Log("DragEnd: "+x+"|"+y);
        if(dragSquare[0] == x && dragSquare[1] == y){
            return;
        }
        ClickSquare(dragSquare[0],dragSquare[1]);
    }

 
    public bool IsWhiteSquare(int col, int row)
    {
        return (row + col) % 2 != 0;
    }
    public string HexagonColor(int value){
        switch ((value)%3)
        {
            case 0:
                return "blacker";
            case 1:
                return "black";
            case 2:
                return "white";
            default:
                return "black";
        }
    }
}



